<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criador de Bots OpenAI</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background: #f0f2f5;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
        }

        h1, h2, h3 {
            color: #333;
            margin-bottom: 20px;
            grid-column: 1 / -1;
            text-align: center;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }

        input[type="text"],
        textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        textarea {
            height: 100px;
            resize: vertical;
        }

        button {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }

        button:hover {
            background: #0056b3;
        }

        button:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }

        .preview {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 4px;
            margin-top: 20px;
        }

        .error {
            color: red;
            margin-top: 5px;
            font-size: 14px;
        }

        .chat-container {
            border: 1px solid #ddd;
            border-radius: 4px;
            height: 400px;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 15px;
            background: #fff;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 4px;
        }

        .user-message {
            background: #007bff;
            color: white;
            margin-left: 20%;
        }

        .bot-message {
            background: #e9ecef;
            margin-right: 20%;
        }

        .chat-input {
            display: flex;
            padding: 10px;
            background: #f8f9fa;
            border-top: 1px solid #ddd;
        }

        .chat-input input {
            flex-grow: 1;
            margin-right: 10px;
        }

        .chat-input button {
            width: auto;
        }

        .saved-configs {
            margin-top: 20px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }

        .saved-config-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 5px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .config-name {
            cursor: pointer;
            flex-grow: 1;
        }

        .delete-btn, .update-btn {
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
            font-size: 12px;
            width: auto;
        }

        .delete-btn {
            background: #dc3545;
        }

        .update-btn {
            background: #28a745;
        }

        .delete-btn:hover {
            background: #c82333;
        }

        .update-btn:hover {
            background: #218838;
        }

        .confirm-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .dialog-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        .dialog-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 15px;
        }

        .dialog-buttons button {
            width: auto;
            padding: 8px 15px;
        }

        .dialog-buttons .cancel-btn {
            background: #6c757d;
        }

        .knowledge-base {
            margin-top: 20px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }

        .knowledge-base textarea {
            width: 100%;
            height: 150px;
            margin-top: 10px;
        }

        .file-input {
            margin-top: 10px;
        }

        .chat-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .chat-controls button {
            width: auto;
        }

        .create-new-bot {
            margin-bottom: 20px;
        }

        .knowledge-base-list {
            list-style-type: none;
            padding: 0;
        }

        .knowledge-base-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 5px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .knowledge-base-item button {
            width: auto;
            padding: 5px 10px;
            font-size: 12px;
        }

        .knowledge-base-title {
            font-weight: bold;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Criador de Bots OpenAI</h1>
        
        <div class="config-section">
            <h2>Configurações do Bot</h2>
            <div class="create-new-bot">
                <button id="createNewBot">Criar Novo Bot</button>
            </div>
            <form id="botForm">
                <div class="form-group">
                    <label for="configName">Nome da Configuração:</label>
                    <input type="text" id="configName" required placeholder="Meu Bot">
                </div>

                <div class="form-group">
                    <label for="apiKey">Chave da API OpenAI:</label>
                    <input type="text" id="apiKey" required placeholder="sk-...">
                </div>

                <div class="form-group">
                    <label for="systemPrompt">Prompt do Sistema:</label>
                    <textarea id="systemPrompt" placeholder="Defina o comportamento do seu bot..."></textarea>
                </div>

                <div class="knowledge-base">
                    <h3>Base de Conhecimento</h3>
                    <div class="form-group">
                        <label for="knowledgeBaseTitle">Título da Base de Conhecimento:</label>
                        <input type="text" id="knowledgeBaseTitle" placeholder="Ex: História do Brasil">
                    </div>
                    <div class="file-input">
                        <label for="knowledgeFile">Carregar arquivo (TXT ou PDF):</label>
                        <input type="file" id="knowledgeFile" accept=".txt,.pdf">
                    </div>
                    <div>
                        <label for="knowledgeText">Ou insira o texto diretamente:</label>
                        <textarea id="knowledgeText" placeholder="Insira sua base de conhecimento aqui..."></textarea>
                    </div>
                    <button type="button" id="addKnowledgeBase">Adicionar Base de Conhecimento</button>
                    <ul id="knowledgeBaseList" class="knowledge-base-list"></ul>
                </div>

                <button type="submit">Salvar Configuração</button>
            </form>

            <div class="saved-configs">
                <h3>Configurações Salvas</h3>
                <div id="savedConfigsList"></div>
            </div>
        </div>

        <div class="chat-section">
            <h2>Teste do Bot</h2>
            <div class="chat-controls">
                <button id="resetChat">Resetar Conversa</button>
            </div>
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages"></div>
                <div class="chat-input">
                    <input type="text" id="userInput" placeholder="Digite sua mensagem...">
                    <button id="sendMessage" disabled>Enviar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
    <script>
        let currentConfig = null;
        let conversationHistory = [];
        let knowledgeBases = [];

        // Lida com o carregamento de arquivos
        document.getElementById('knowledgeFile').addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;

            if (file.type === 'text/plain') {
                const text = await file.text();
                document.getElementById('knowledgeText').value = text;
            } else if (file.type === 'application/pdf') {
                const reader = new FileReader();
                reader.onload = async function(event) {
                    const typedarray = new Uint8Array(event.target.result);
                    const pdf = await pdfjsLib.getDocument(typedarray).promise;
                    let fullText = '';
                    for (let i = 1; i <= pdf.numPages; i++) {
                        const page = await pdf.getPage(i);
                        const textContent = await page.getTextContent();
                        fullText += textContent.items.map(item => item.str).join(' ') + '\n';
                    }
                    document.getElementById('knowledgeText').value = fullText;
                };
                reader.readAsArrayBuffer(file);
            }
        });

        // Adiciona base de conhecimento
        document.getElementById('addKnowledgeBase').addEventListener('click', function() {
            const knowledgeTitle = document.getElementById('knowledgeBaseTitle').value.trim();
            const knowledgeText = document.getElementById('knowledgeText').value.trim();
            if (knowledgeTitle && knowledgeText) {
                knowledgeBases.push({ title: knowledgeTitle, content: knowledgeText });
                updateKnowledgeBaseList();
                document.getElementById('knowledgeBaseTitle').value = '';
                document.getElementById('knowledgeText').value = '';
            } else {
                alert('Por favor, preencha o título e o conteúdo da base de conhecimento.');
            }
        });

        // Atualiza a lista de bases de conhecimento
        function updateKnowledgeBaseList() {
            const list = document.getElementById('knowledgeBaseList');
            list.innerHTML = '';
            knowledgeBases.forEach((base, index) => {
                const li = document.createElement('li');
                li.className = 'knowledge-base-item';
                const titleSpan = document.createElement('span');
                titleSpan.className = 'knowledge-base-title';
                titleSpan.textContent = base.title;
                li.appendChild(titleSpan);
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Excluir';
                deleteButton.className = 'delete-btn';
                deleteButton.onclick = () => {
                    knowledgeBases.splice(index, 1);
                    updateKnowledgeBaseList();
                };
                li.appendChild(deleteButton);
                list.appendChild(li);
            });
        }

        // Salva ou atualiza configuração
        document.getElementById('botForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const config = {
                name: document.getElementById('configName').value,
                apiKey: document.getElementById('apiKey').value,
                model: 'gpt-4o-mini-2024-07-18', // Modelo fixo
                systemPrompt: document.getElementById('systemPrompt').value,
                temperature: 0.7, // Temperatura fixa
                maxTokens: 150, // Tokens fixos
                knowledgeBases: knowledgeBases
            };

            // Verifica se é uma atualização ou uma nova configuração
            const savedConfigs = JSON.parse(localStorage.getItem('botConfigs') || '[]');
            const existingConfigIndex = savedConfigs.findIndex(c => c.name === config.name);

            if (existingConfigIndex !== -1) {
                // Atualiza a configuração existente
                savedConfigs[existingConfigIndex] = config;
                alert('Configuração atualizada com sucesso!');
            } else {
                // Adiciona nova configuração
                savedConfigs.push(config);
                alert('Nova configuração salva com sucesso!');
            }

            localStorage.setItem('botConfigs', JSON.stringify(savedConfigs));

            currentConfig = config;
            document.getElementById('sendMessage').disabled = false;
            
            loadSavedConfigs();
        });

        // Carrega configurações salvas
        function loadSavedConfigs() {
            const savedConfigs = JSON.parse(localStorage.getItem('botConfigs') || '[]');
            const container = document.getElementById('savedConfigsList');
            container.innerHTML = '';

            savedConfigs.forEach((config, index) => {
                const configElement = document.createElement('div');
                configElement.className = 'saved-config-item';
                
                const configName = document.createElement('span');
                configName.className = 'config-name';
                configName.textContent = config.name;
                configName.onclick = () => loadConfig(config);
                
                const updateBtn = document.createElement('button');
                updateBtn.className = 'update-btn';
                updateBtn.textContent = 'Atualizar';
                updateBtn.onclick = (e) => {
                    e.stopPropagation();
                    loadConfig(config);
                };

                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn';
                deleteBtn.textContent = 'Excluir';
                deleteBtn.onclick = (e) => {
                    e.stopPropagation();
                    showConfirmDialog(index);
                };
                
                configElement.appendChild(configName);
                configElement.appendChild(updateBtn);
                configElement.appendChild(deleteBtn);
                container.appendChild(configElement);
            });
        }

        // Carrega uma configuração
        function loadConfig(config) {
            document.getElementById('configName').value = config.name;
            document.getElementById('apiKey').value = config.apiKey;
            document.getElementById('systemPrompt').value = config.systemPrompt;
            knowledgeBases = config.knowledgeBases || [];
            updateKnowledgeBaseList();

            currentConfig = config;
            document.getElementById('sendMessage').disabled = false;
            conversationHistory = [];
            document.getElementById('chatMessages').innerHTML = '';
        }

        // Envia mensagem para o bot
        async function sendMessage() {
            const userInput = document.getElementById('userInput');
            const message = userInput.value.trim();
            if (!message) return;

            // Adiciona mensagem do usuário ao chat
            addMessageToChat('user', message);
            userInput.value = '';

            // Prepara o histórico da conversa
            conversationHistory.push({
                role: "user",
                content: message
            });

            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${currentConfig.apiKey}`
                    },
                    body: JSON.stringify({
                        model: currentConfig.model,
                        messages: [
                            {
                                role: "system",
                                content: `${currentConfig.systemPrompt}\n\nBases de Conhecimento:\n${currentConfig.knowledgeBases.map(kb => `${kb.title}:\n${kb.content}`).join('\n\n')}`
                            },
                            ...conversationHistory
                        ],
                        temperature: currentConfig.temperature,
                        max_tokens: currentConfig.maxTokens
                    })
                });

                const data = await response.json();
                if (data.error) {
                    throw new Error(data.error.message);
                }

                const botResponse = data.choices[0].message.content;
                conversationHistory.push({
                    role: "assistant",
                    content: botResponse
                });
                addMessageToChat('bot', botResponse);
            } catch (error) {
                addMessageToChat('bot', `Erro: ${error.message}`);
            }
        }

        // Adiciona mensagem ao chat
        function addMessageToChat(role, content) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}-message`;
            messageDiv.textContent = content;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Mostra diálogo de confirmação
        function showConfirmDialog(index) {
            const dialog = document.createElement('div');
            dialog.className = 'confirm-dialog';
            dialog.innerHTML = `
                <p>Tem certeza que deseja excluir esta configuração?</p>
                <div class="dialog-buttons">
                    <button class="cancel-btn">Cancelar</button>
                    <button class="confirm-btn">Confirmar</button>
                </div>
            `;

            const overlay = document.createElement('div');
            overlay.className = 'dialog-overlay';

            document.body.appendChild(overlay);
            document.body.appendChild(dialog);

            dialog.querySelector('.cancel-btn').onclick = () => {
                document.body.removeChild(overlay);
                document.body.removeChild(dialog);
            };

            dialog.querySelector('.confirm-btn').onclick = () => {
                deleteConfig(index);
                document.body.removeChild(overlay);
                document.body.removeChild(dialog);
            };
        }

        // Deleta configuração
        function deleteConfig(index) {
            const savedConfigs = JSON.parse(localStorage.getItem('botConfigs') || '[]');
            savedConfigs.splice(index, 1);
            localStorage.setItem('botConfigs', JSON.stringify(savedConfigs));
            loadSavedConfigs();
        }

        // Reseta a conversa
        function resetChat() {
            conversationHistory = [];
            document.getElementById('chatMessages').innerHTML = '';
            addMessageToChat('bot', 'A conversa foi resetada. Como posso ajudar?');
        }

        // Cria um novo bot
        function createNewBot() {
            document.getElementById('configName').value = '';
            document.getElementById('apiKey').value = '';
            document.getElementById('systemPrompt').value = '';
            document.getElementById('knowledgeBaseTitle').value = '';
            document.getElementById('knowledgeText').value = '';
            knowledgeBases = [];
            updateKnowledgeBaseList();
            currentConfig = null;
            document.getElementById('sendMessage').disabled = true;
            conversationHistory = [];
            document.getElementById('chatMessages').innerHTML = '';
        }

        // Event listeners
        document.getElementById('sendMessage').addEventListener('click', sendMessage);
        document.getElementById('userInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        document.getElementById('resetChat').addEventListener('click', resetChat);
        document.getElementById('createNewBot').addEventListener('click', createNewBot);

        // Carrega configurações salvas ao iniciar
        loadSavedConfigs();
    </script>
</body>
</html>
